1. What were some challenges you faced while making this app?
While building the fullstack Battleship application, one of the major challenges we encountered was implementing secure user authentication and managing sessions using cookies. 
Ensuring that login, registration, and logout functionality worked seamlessly across pages, while respecting the correct redirect behavior, required precise coordination between the frontend and backend. 
Another challenge was establishing smooth communication between the frontend React components and the Express backend via RESTful APIs—especially while handling game state and user interactions in a way that followed the specified game logic. 
Additionally, deploying the app on Render with environment variables and handling runtime errors during deployment took several attempts and required careful debugging.

2. Given more time, what additional features, functional or design changes would you make?
If we had more time, we would enhance the UI/UX design to make it more interactive and responsive across devices. 
This includes adding sound effects, animations for hits/misses, and visual feedback to improve the gaming experience. 
Functionally, we’d also love to add the ability for users to play with random online opponents, as well as a tutorial overlay or modal for new users to better understand how to navigate the game. 
These additions would improve both engagement and accessibility.

3. What assumptions did you make while working on this assignment?
We assumed that each username would be unique in the system, and thus used it as a key identifier throughout our database and frontend logic. 
Additionally, we assumed that users were familiar with the basic rules of Battleship, so we did not implement an in-game tutorial or detailed instructions. 
We also assumed a low volume of users (in line with the assignment scope), so performance optimizations and real-time updates were not prioritized.

4. How long did this assignment take to complete?
This project took approximately 80 hours to complete. This includes time spent designing the user interface, setting up the backend API and MongoDB schemas, handling cookie-based authentication, implementing gameplay logic, and troubleshooting issues during deployment and testing.
